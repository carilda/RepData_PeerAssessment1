read.csv(filename = "activity.zip", headers = TRUE, sep = ",", na.strings = 
"NA", stringsAsFactors = FALSE)
read.csv(filename = "activity.csv", headers = TRUE, sep = ",", na.strings = 
"NA", stringsAsFactors = FALSE)
DT <- data.table(read.csv(file = "activity.csv", headers = TRUE, na.strings = "NA", stringsAsFactors = FALSE))
library(data.table)
DT <- data.table(read.csv(file = "activity.csv", headers = TRUE, na.strings = "NA", stringsAsFactors = FALSE))
DT <- data.table(read.csv(file = "activity.csv", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE))
head(DT)
tail(DT)
DT2 <- DT[complete.cases(DT)]
str(DT)
str(DT2)
df$Dates <- as.date(df$Date, format="%d/%m/%Y")
DT <- transform(date = as.Date(date))
sappply(DT, class)
sapply(DT, class)
DT$datedate <- as.Date(DT.date)
DT$datedate <- as.Date(DT$date)
head(DT)
max(DT$interval)
sapply(DT, class)
DT$datefactor <- as.factor(DT$date)
head(DT)
sapply(DT, class)
str(DT)
DT2 <- DT[complete.cases(DT)]
head(DT2)
str(DT2)
str(D)
str(DT)
hist(DT2$datedate, sum(DT$steps))
aggregate(DT2$datedate, DT2$steps, FUN = sum)
DF <- as.data.frame(DT2)
aggregate(DT2$datedate, DT2$steps, FUN = sum)
tapply(DF$datefactor, DF$steps, FUN=sum)
tapply(DF$steps, DF$datefactor, FUN=sum)
DF <- as.data.frame(DT[complete.cases(DT)])
subset(DF, DF$steps = NA)
DF <- data.frame(DT[complete.cases(DT)])
subset(DF, steps == NA)
tapply(DF$steps, DF$datefactor, FUN=sum)
head(DF, 31)
tapply(DF$steps, DF$datefactor, FUN=sum)
answer <- tapply(DF$steps, DF$datefactor, FUN=sum)
class(answer)
str(answer)
answer <- tapply(DF$steps, DF$datefactor, FUN=sum(na.rm  = TRUE)
)
answer <- tapply((DF$steps, na.rm = TRUE), DF$datefactor, FUN=sum)
answer <- tapply(DF$steps, DF$datefactor, FUN = function(x) {sum(x, na.rm = TRUE)})
answer
class(answer)
hist(answer)
hist(answer, breaks = 100, color = "green")
hist(answer, breaks = 100, col = "green")
answer <- tapply(DF$steps, DF$datefactor, FUN = function(x) {sum(x, na.rm = TRUE)})
mean(answer)
mean(answer, na.rm)
 
answer
mean(answer)
median(answer)
answer2 <- aggregate(DF$steps, by = list(DF$interval), FUN = mean)
answer2
str(answer2)
head(answer2)
answer2 <- aggregate(DF$steps, by = list(DF$interval), FUN = sum)
head(answer2)
head(answer2, 30)
answer2 <- aggregate(DF$steps, by = list(DF$interval), FUN = mean)
str(answer2)
head(answer2)
colnames(answer2) <- c(interval, mean)
colnames(answer2) <- c("interval", "mean")
head(answer2)
plot(interval, mean, type = 1)
plot(answer2$interval, answer2$mean, type = 1)
plot(answer2$steps, answer2$interval, type = 1)
answer2
plot(answer2$mean, answer2$interval, type = 1)
plot(answer2$mean, answer2$interval, type = "1")
plot(answer2$mean, answer2$interval, type = "l")
plot(answer2$interval, answer2$mean type = "l")
plot(answer2$interval, answer2$mean, type = "l")
max(answer2$mean)
answer2[, mean == max(answer2$mean)]
subset(answer2[, mean == max(answer2$mean)])
subset(answer, mean == max(answer2$mean))
answer2[which.max(answer2$mean)]
head(answer2)
colnames(answer2) <- c(interval, mn)
colnames(answer2) <- c("interval", "mn")
head(answer2)
answer2[which.max(answer2$mn)]
answer2[, mn == max(answer2$mn)]
answer2[, answer2$mn == max(answer2$mn)]
answer2[which.max(answer2$mn)]
head(answer2)
colnames(answer2)
answer2[which.max(answer2$mn),]
max(answer2$mn)
plot(interval, mean, type = 1)
plot(answer2$interval, answer2$mn, type = "l")
answer2[which.max(answer2$mn),]
str(DF)
str(DT)
sum(DT[is.na(steps)])
x <- DT[is.na(steps)]
x
x <- DT[[is.na(steps)]]
x <- DT[is.na(steps)]
x
nrows(x)
nrow(x)
nrow(DT[is.na(steps)])
DT[steps == 0] <- answer2[interval == DT$interval]
DT[steps == 0] <- answer2[answer2$interval == DT$interval]
DT[steps == 0] <- answer2[answer2$interval == DT$interval,]
warnings()
head(answer2)
answer2[interval = 25, ]
answer2[interval == 25, ]
answer2[answer2$interval == 25, ]
x <- answer2[answer2$interval == 25, ]
x[1,2]
answer2[answer2$interval == 25, ][1,2]
DT2 <- as.matrix(DT)
k <- which(is.na(m), arr.ind=TRUE)
k <- which(is.na(DT2), arr.ind=TRUE)
DT[k] <- rowMeans(DT, na.rm = TRUE)[k[,1]
]
DT2[k] <- rowMeans(DT2, na.rm = TRUE)[k[,1]
]
t(apply(DT, 1, function(xv) { xv[xv$steps == 0] <- answer2[answer2$interval == xv$interval][1,2]; return(xv) }
))
answer2[answer2$interval == 25, ][1,2]
DT2[DT2$steps == 0,] <- answer2[answer2$interval == DT2$interval][1,2] 
str(DT2)
sapply(DT2, class)
str(DT2)
head(DT2)
sapply(DT2, class)
DT2[is.na(DT2$steps),] <- answer2[answer2$interval == DT2$interval][1,2] 
class(DT2)
class(DT2["interval"]
)
class(DT2["steps"])
DT2 <- as.data.frame(DT)
DT2[is.na(DT2$steps),] <- answer2[answer2$interval == DT2$interval][1,2] 
colnames(DT2)
colnames(answer2)
DT2 <- merge(DT, answer2, by=intersect(as.numeric(DT$interval), answer$interval), all.x = TRUE)
DT2 <- merge(DT, answer2, by=intersect(as.numeric(DT["interval"]), answer["interval"], all.x = TRUE)
DT2 <- merge(DT, answer2, by=intersect(as.numeric(DT["interval"]), answer["interval"]), all.x = TRUE)
?setkey
sapply(DT, class)
DT2 <- setkey(DT, interval)
head(DT2)
q
?sort
?setkey
DT2 <- DT
str(DT2)
setkey(DT2, interval)
head(DT2)
DT2
DT
      steps        date    interval    datedate  datefactor 
DT <- data.table(read.csv(file = "activity.csv", header = TRUE, na.strings = "NA",  stringsAsFactors = FALSE))
DT$datedate <- as.Date(DT$date)
DT$datefactor <- as.factor(DT$date)
head(DT)
DT
DT2 <- DT
q()
